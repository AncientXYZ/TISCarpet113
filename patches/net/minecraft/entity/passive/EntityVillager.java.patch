--- a/net/minecraft/entity/passive/EntityVillager.java
+++ b/net/minecraft/entity/passive/EntityVillager.java
@@ -91,6 +91,8 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import carpet.settings.CarpetSettings;
+
 public class EntityVillager extends EntityAgeable implements INpc, IMerchant
 {
     private static final Logger LOGGER = LogManager.getLogger();
@@ -107,6 +109,8 @@
     private boolean needsInitilization;
     private boolean isWillingToMate;
     private int wealth;
+    //[CM] to public for entity info
+    public int getWealth() { return wealth; }
     private String lastBuyingPlayer;
     private int careerId;
     private int careerLevel;
@@ -131,28 +135,30 @@
 
     protected void initEntityAI()
     {
-        this.tasks.addTask(0, new EntityAISwimming(this));
-        this.tasks.addTask(1, new EntityAIAvoidEntity<>(this, EntityZombie.class, 8.0F, 0.6D, 0.6D));
-        this.tasks.addTask(1, new EntityAIAvoidEntity<>(this, EntityEvoker.class, 12.0F, 0.8D, 0.8D));
-        this.tasks.addTask(1, new EntityAIAvoidEntity<>(this, EntityVindicator.class, 8.0F, 0.8D, 0.8D));
-        this.tasks.addTask(1, new EntityAIAvoidEntity<>(this, EntityVex.class, 8.0F, 0.6D, 0.6D));
-        this.tasks.addTask(1, new EntityAITradePlayer(this));
-        this.tasks.addTask(1, new EntityAILookAtTradePlayer(this));
-        this.tasks.addTask(2, new EntityAIMoveIndoors(this));
-        this.tasks.addTask(3, new EntityAIRestrictOpenDoor(this));
-        this.tasks.addTask(4, new EntityAIOpenDoor(this, true));
-        this.tasks.addTask(5, new EntityAIMoveTowardsRestriction(this, 0.6D));
-        this.tasks.addTask(6, new EntityAIVillagerMate(this));
-        this.tasks.addTask(7, new EntityAIFollowGolem(this));
-        this.tasks.addTask(9, new EntityAIWatchClosestWithoutMoving(this, EntityPlayer.class, 3.0F, 1.0F));
-        this.tasks.addTask(9, new EntityAIVillagerInteract(this));
-        this.tasks.addTask(9, new EntityAIWanderAvoidWater(this, 0.6D));
-        this.tasks.addTask(10, new EntityAIWatchClosest(this, EntityLiving.class, 8.0F));
+        if (!CarpetSettings.yeetVillagerAi) {
+            this.tasks.addTask(0, new EntityAISwimming(this));
+            this.tasks.addTask(1, new EntityAIAvoidEntity<>(this, EntityZombie.class, 8.0F, 0.6D, 0.6D));
+            this.tasks.addTask(1, new EntityAIAvoidEntity<>(this, EntityEvoker.class, 12.0F, 0.8D, 0.8D));
+            this.tasks.addTask(1, new EntityAIAvoidEntity<>(this, EntityVindicator.class, 8.0F, 0.8D, 0.8D));
+            this.tasks.addTask(1, new EntityAIAvoidEntity<>(this, EntityVex.class, 8.0F, 0.6D, 0.6D));
+            this.tasks.addTask(1, new EntityAITradePlayer(this));
+            this.tasks.addTask(1, new EntityAILookAtTradePlayer(this));
+            this.tasks.addTask(2, new EntityAIMoveIndoors(this));
+            this.tasks.addTask(3, new EntityAIRestrictOpenDoor(this));
+            this.tasks.addTask(4, new EntityAIOpenDoor(this, true));
+            this.tasks.addTask(5, new EntityAIMoveTowardsRestriction(this, 0.6D));
+            this.tasks.addTask(6, new EntityAIVillagerMate(this));
+            this.tasks.addTask(7, new EntityAIFollowGolem(this));
+            this.tasks.addTask(9, new EntityAIWatchClosestWithoutMoving(this, EntityPlayer.class, 3.0F, 1.0F));
+            this.tasks.addTask(9, new EntityAIVillagerInteract(this));
+            this.tasks.addTask(9, new EntityAIWanderAvoidWater(this, 0.6D));
+            this.tasks.addTask(10, new EntityAIWatchClosest(this, EntityLiving.class, 8.0F));
+        }
     }
 
     private void setAdditionalAItasks()
     {
-        if (!this.areAdditionalTasksSet)
+        if (!this.areAdditionalTasksSet && !CarpetSettings.yeetVillagerAi)
         {
             this.areAdditionalTasksSet = true;
 
