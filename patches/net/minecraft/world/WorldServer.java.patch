--- a/net/minecraft/world/WorldServer.java
+++ b/net/minecraft/world/WorldServer.java
@@ -1,5 +1,10 @@
 package net.minecraft.world;
 
+import carpet.helpers.TickSpeed;
+import carpet.settings.CarpetSettings;
+import carpet.utils.CarpetProfiler;
+import carpet.logging.logHelpers.BUDLogHelper;
+import carpet.logging.logHelpers.NTELogHelper;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.util.concurrent.ListenableFuture;
@@ -191,15 +196,28 @@
             this.wakeAllPlayers();
         }
 
+        //CM profiler
+        int did = this.dimension.getType().getId();
+        String world_name = (did==0)?"Overworld":((did<0?"The Nether":"The End"));
+        // CM end
+
+        if (TickSpeed.process_entities)
+        { // [CM] extra indent to skip processing of entities
         this.profiler.startSection("spawner");
+        CarpetProfiler.start_section(world_name, "Spawning");
+        BUDLogHelper.setTickStage("Spawning"); // TISCM BUD logger
 
         if (this.getGameRules().getBoolean("doMobSpawning") && this.worldInfo.getGenerator() != WorldType.DEBUG_ALL_BLOCK_STATES)
         {
             this.entitySpawner.findChunksForSpawning(this, this.spawnHostileMobs, this.spawnPeacefulMobs, this.worldInfo.getGameTime() % 400L == 0L);
             this.getChunkProvider().spawnMobs(this, this.spawnHostileMobs, this.spawnPeacefulMobs);
         }
+        CarpetProfiler.end_current_section();
+        }
+        // [CM] end extra indent
 
         this.profiler.endStartSection("chunkSource");
+        BUDLogHelper.setTickStage("ChunkUnloading"); // TISCM BUD logger
         this.chunkProvider.tick(hasTimeLeft);
         int j = this.calculateSkylightSubtracted(1.0F);
 
@@ -208,25 +226,49 @@
             this.setSkylightSubtracted(j);
         }
 
+        if (TickSpeed.process_entities)
+        { // CM extra indent to skip processing of entities
         this.worldInfo.setGameTime(this.worldInfo.getGameTime() + 1L);
-
+        BUDLogHelper.setGameTime(this.worldInfo.getGameTime()); // TISCM BUD logger
         if (this.getGameRules().getBoolean("doDaylightCycle"))
         {
             this.worldInfo.setDayTime(this.worldInfo.getDayTime() + 1L);
         }
 
         this.profiler.endStartSection("tickPending");
+        CarpetProfiler.start_section(world_name, "Blocks");
+        BUDLogHelper.setTickStage("TileTick"); // TISCM BUD logger
         this.tickPending();
+        CarpetProfiler.end_current_section();
+        } // end extra indent
         this.profiler.endStartSection("tickBlocks");
+        CarpetProfiler.start_section(world_name, "Blocks");
         this.tickBlocks();
+        CarpetProfiler.end_current_section();
         this.profiler.endStartSection("chunkMap");
+        BUDLogHelper.setTickStage("PlayerChunkMap"); // TISCM BUD logger
         this.playerChunkMap.tick();
+
+        if (TickSpeed.process_entities)
+        { // CM extra indent to skip processing of entities
         this.profiler.endStartSection("village");
+        CarpetProfiler.start_section(world_name, "Villages");
+        BUDLogHelper.setTickStage("Villages"); // TISCM BUD logger
         this.villageCollection.tick();
         this.villageSiege.tick();
+        CarpetProfiler.end_current_section();
         this.profiler.endStartSection("portalForcer");
+        BUDLogHelper.setTickStage("PortalForcer"); // TISCM BUD logger
         this.worldTeleporter.tick(this.getGameTime());
+        }
+        // [TISCM] Newlight
+        if (CarpetSettings.newLight)
+        {
+            this.profiler.endStartSection("lighting");
+            this.getLightingEngine().procLightUpdates();
+        }
         this.profiler.endSection();
+        BUDLogHelper.setTickStage("BlockEvent"); // TISCM BUD logger
         this.sendQueuedBlockEvents();
         this.insideTick = false;
     }
@@ -270,7 +312,7 @@
                 }
             }
 
-            this.allPlayersSleeping = j > 0 && j >= this.playerEntities.size() - i;
+            this.allPlayersSleeping = j > 0 && (CarpetSettings.onePlayerSleeping || j >= this.playerEntities.size() - i);
         }
     }
 
@@ -306,6 +348,13 @@
     {
         if (this.allPlayersSleeping && !this.isRemote)
         {
+            if (CarpetSettings.onePlayerSleeping)
+            {
+                for (EntityPlayer entityplayer : this.playerEntities)
+                    if (!entityplayer.isSpectator() && entityplayer.isPlayerFullyAsleep())
+                        return true;
+                return false;
+            }
             for (EntityPlayer entityplayer : this.playerEntities)
             {
                 if (!entityplayer.isSpectator() && !entityplayer.isPlayerFullyAsleep())
@@ -396,6 +445,7 @@
             boolean flag = this.isRaining();
             boolean flag1 = this.isThundering();
             this.profiler.startSection("pollingChunks");
+            BUDLogHelper.setTickStage("RandomTick&Weather"); // TISCM BUD logger
 
             for (Iterator<Chunk> iterator = this.playerChunkMap.getChunkIterator(); iterator.hasNext(); this.profiler.endSection())
             {
@@ -407,6 +457,13 @@
                 chunk.enqueueRelightChecks();
                 this.profiler.endStartSection("tickChunk");
                 chunk.tick(false);
+                //[CM] tick freeze
+                if (!TickSpeed.process_entities)
+                { // skipping the rest of the block processing
+                    this.profiler.endSection();
+                    continue;
+                }
+
                 this.profiler.endStartSection("thunder");
 
                 if (flag && flag1 && this.rand.nextInt(100000) == 0)
@@ -499,7 +556,7 @@
         }
     }
 
-    protected BlockPos adjustPosToNearbyEntity(BlockPos pos)
+    public BlockPos adjustPosToNearbyEntity(BlockPos pos) // [CM] Changed access to public for summonNaturalLightning
     {
         BlockPos blockpos = this.getHeight(Heightmap.Type.MOTION_BLOCKING, pos);
         AxisAlignedBB axisalignedbb = (new AxisAlignedBB(blockpos, new BlockPos(blockpos.getX(), this.getHeight(), blockpos.getZ()))).grow(3.0D);
@@ -608,7 +665,14 @@
     {
         if (this.worldInfo.getGenerator() != WorldType.DEBUG_ALL_BLOCK_STATES)
         {
+            // TISCM NTE logger
+            NTELogHelper.setListInfo("Block", this.getDimension().getType().getId());
+            // end TISCM NTE logger
             this.pendingBlockTicks.tick();
+
+            // TISCM NTE logger
+            NTELogHelper.setListInfo("Fluid", this.getDimension().getType().getId());
+            // end TISCM NTE logger
             this.pendingFluidTicks.tick();
         }
     }
