--- a/net/minecraft/world/ServerTickList.java
+++ b/net/minecraft/world/ServerTickList.java
@@ -1,5 +1,7 @@
 package net.minecraft.world;
 
+import carpet.logging.LoggerRegistry;
+import carpet.logging.logHelpers.NTELogHelper;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import java.util.Collections;
@@ -45,19 +47,29 @@
 
     public void tick()
     {
+        // TISCM NTE logger
+        int NTElogger_listSize = 0;
+        int NTElogger_dealt = 0;
+        int NTElogger_ticked = 0;
+        int NTElogger_skipped = 0;
+        // end TISCM NTE logger
+        
         int i = this.pendingTickListEntriesTreeSet.size();
-
         if (i != this.pendingTickListEntriesHashSet.size())
         {
             throw new IllegalStateException("TickNextTick list out of synch");
         }
         else
         {
+            // TISCM NTE logger
+            NTElogger_listSize = i;
+            // end TISCM NTE logger
+            
             if (i > 65536)
             {
                 i = 65536;
             }
-
+            
             this.world.profiler.startSection("cleaning");
 
             for (int j = 0; j < i; ++j)
@@ -76,8 +88,12 @@
 
             this.world.profiler.endSection();
             this.world.profiler.startSection("ticking");
-            Iterator<NextTickListEntry<T>> iterator = this.pendingTickListEntriesThisTick.iterator();
 
+            // TISCM NTE logger
+            NTElogger_dealt = this.pendingTickListEntriesThisTick.size();
+            // end TISCM NTE logger
+            
+            Iterator<NextTickListEntry<T>> iterator = this.pendingTickListEntriesThisTick.iterator();
             while (iterator.hasNext())
             {
                 NextTickListEntry<T> nextticklistentry1 = iterator.next();
@@ -89,6 +105,10 @@
                     try
                     {
                         this.tickFunction.accept(nextticklistentry1);
+                        
+                        // TISCM NTE logger
+                        NTElogger_ticked++;
+                        // end TISCM NTE logger
                     }
                     catch (Throwable throwable)
                     {
@@ -101,11 +121,22 @@
                 else
                 {
                     this.scheduleTick(nextticklistentry1.position, nextticklistentry1.getTarget(), 0);
+                    
+                    // TISCM NTE logger
+                    NTElogger_skipped++;
+                    // end TISCM NTE logger
                 }
             }
 
             this.world.profiler.endSection();
             this.pendingTickListEntriesThisTick.clear();
+            
+            // TISCM NTE logger
+            if (carpet.logging.LoggerRegistry.__nte)
+            {
+                carpet.logging.logHelpers.NTELogHelper.onNTETicked(this.world.getGameTime(), NTElogger_listSize, NTElogger_dealt, NTElogger_ticked, NTElogger_skipped);
+            }
+            // end TISCM NTE logger
         }
     }
 
